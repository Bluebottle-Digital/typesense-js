{"version":3,"sources":["Typesense/Documents.js"],"names":["RESOURCEPATH","Documents","collectionName","apiCall","configuration","_collectionName","_apiCall","_configuration","_requestWithCache","RequestWithCache","document","options","post","_endpointPath","Object","assign","action","queryParameters","delete","documents","logger","warn","import","Array","isArray","documentsInJSONLFormat","map","JSON","stringify","join","performRequest","bodyParameters","additionalHeaders","resultsInJSONLFormat","resultsInJSONFormat","split","r","parse","failedItems","filter","success","length","ImportError","get","searchParameters","cacheSearchResultsForSeconds","perform","cacheResponseForSeconds","operation","Collections","undefined"],"mappings":"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","sourcesContent":["'use strict'\n\nimport Collections from './Collections'\nimport RequestWithCache from './RequestWithCache'\nimport { ImportError } from './Errors'\n\nconst RESOURCEPATH = '/documents'\n\nexport default class Documents {\n  constructor (collectionName, apiCall, configuration) {\n    this._collectionName = collectionName\n    this._apiCall = apiCall\n    this._configuration = configuration\n\n    this._requestWithCache = new RequestWithCache()\n  }\n\n  create (document, options = {}) {\n    return this._apiCall.post(this._endpointPath(), document, options)\n  }\n\n  upsert (document, options = {}) {\n    return this._apiCall.post(this._endpointPath(), document, Object.assign({}, options, {action: 'upsert'}))\n  }\n\n  update (document, options = {}) {\n    return this._apiCall.post(this._endpointPath(), document, Object.assign({}, options, {action: 'update'}))\n  }\n\n  delete (queryParameters = {}) {\n    return this._apiCall.delete(this._endpointPath(), queryParameters)\n  }\n\n  async createMany (documents, options = {}) {\n    this._apiCall.logger.warn('createMany is deprecated and will be removed in a future version. Use import instead, which now takes both an array of documents or a JSONL string of documents')\n    return this.import(documents, options)\n  }\n\n  /**\n   * Import a set of documents in a batch.\n   * @param {string|Array} documents - Can be a JSONL string of documents or an array of document objects.\n   * @return {string|Array} Returns a JSONL string if the input was a JSONL string, otherwise it returns an array of results.\n   */\n  async import (documents, options = {}) {\n    let documentsInJSONLFormat\n    if (Array.isArray(documents)) {\n      documentsInJSONLFormat = documents.map(document => JSON.stringify(document)).join('\\n')\n    } else {\n      documentsInJSONLFormat = documents\n    }\n\n    const resultsInJSONLFormat = await this._apiCall.performRequest(\n      'post',\n      this._endpointPath('import'),\n      {\n        queryParameters: options,\n        bodyParameters: documentsInJSONLFormat,\n        additionalHeaders: {'Content-Type': 'text/plain'}\n      }\n    )\n\n    if (Array.isArray(documents)) {\n      const resultsInJSONFormat = resultsInJSONLFormat.split('\\n').map(r => JSON.parse((r)))\n      const failedItems = resultsInJSONFormat.filter(r => r.success === false)\n      if (failedItems.length > 0) {\n        throw new ImportError(`${resultsInJSONFormat.length - failedItems.length} documents imported successfully, ${failedItems.length} documents failed during import. Use \\`error.importResults\\` from the raised exception to get a detailed error reason for each document.`, resultsInJSONFormat)\n      } else {\n        return resultsInJSONFormat\n      }\n    } else {\n      return resultsInJSONLFormat\n    }\n  }\n\n  export () {\n    return this._apiCall.get(this._endpointPath('export'))\n  }\n\n  search (searchParameters, {cacheSearchResultsForSeconds = this._configuration.cacheSearchResultsForSeconds} = {}) {\n    return this._requestWithCache.perform(\n      this._apiCall,\n      this._apiCall.get,\n      [this._endpointPath('search'), searchParameters],\n      {cacheResponseForSeconds: cacheSearchResultsForSeconds}\n    )\n  }\n\n  _endpointPath (operation) {\n    return `${Collections.RESOURCEPATH}/${this._collectionName}${Documents.RESOURCEPATH}${operation === undefined ? '' : '/' + operation}`\n  }\n\n  static get RESOURCEPATH () {\n    return RESOURCEPATH\n  }\n}\n"],"file":"Documents.js"}